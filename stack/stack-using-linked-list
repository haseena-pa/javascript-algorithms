class Stack {
    constructor() {
        this.first = null;
        this.last = null;
        this.size = 0;
    }

    // it behaves as unshift inorder to reduce the time complexity
    // if we are pushing an item to the last, in linkedlist, we have iterate to the end and then we have to push
    push(val) {
        const newNode = new Node(val);
        if(!this.first) {
            this.first = newNode;
            this.last = newNode;
        } else {
            const temp = this.first;
            this.first = newNode;
            this.first.next = temp;
        }
        return ++this.size;
    }

    pop() {
        if(!this.first) return null;
        const temp = this.first;
        if(this.first === this.last) {
            this.last = null;
        }
        this.first = this.first.next;
        this.size--;
        return temp.value;
    }
}


// push and pop 0(1);
// search & access 0(N)